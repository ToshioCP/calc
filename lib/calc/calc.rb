#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'


require 'strscan'
include Math

class Calc < Racc::Parser

module_eval(<<'...end calc.y/module_eval...', 'calc.y', 46)
 
def initialize
  @table = {}
end

def run(s)
  @tokens = []
  lex(s)
  do_parse
end

def lex(s)
  ss = StringScanner.new(s)
  until ss.eos?
    if ss.scan(/sqrt|sin|cos|tan|asin|acos|atan|exp|log|sqrt|PI|E|v/)
      @tokens << [ss[0].to_sym, ss[0]]
    elsif ss.scan(/[[:alpha:]]+/)
      @tokens << [:ID, ss[0]]
    elsif ss.scan(/[[:digit:]]+(\.[[:digit:]]*)?/)
      @tokens << [:NUM, ss[0].to_f]
    elsif ss.scan(/\*\*/)
      @tokens << [ss[0],ss[0]]
    elsif ss.scan(/[+\-*\/()=;]/)
      @tokens << [ss[0],ss[0]]
    elsif ss.scan(/\s+/)
      # ignore spaces
    else
      raise "Unexpected character."
    end
  end
  @tokens << [false, nil] # end mark
end

def next_token
  @tokens.shift
end

...end calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    23,    24,    23,    24,    23,    24,    23,    24,    23,    24,
    23,    24,    23,    24,    23,    24,    23,    24,    23,    24,
    49,    22,    60,    25,    61,    30,    62,    32,    63,    33,
    64,    34,    65,    35,    66,    36,    67,    37,    68,    23,
    24,    38,     4,    39,     3,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    69,
     7,     4,    40,    27,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,     4,     7,
    27,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,     4,     7,    27,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,     4,     7,    27,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,     4,
     7,    27,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,     4,     7,    27,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,     4,     7,    27,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
     4,     7,    27,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,     4,     7,    27,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,     4,     7,    27,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,     4,     7,    27,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,     4,     7,
    27,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,     4,     7,    27,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,     4,     7,    27,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    41,
     7,    27,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    42,     7,    27,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    30,     7,    27,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
   nil,     7,    27,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,   nil,     7,    23,
    24,    28,    29,    28,    29,    23,    24 ]

racc_action_check = [
    31,    31,    50,    50,    51,    51,    52,    52,    53,    53,
    54,    54,    55,    55,    56,    56,    57,    57,    58,    58,
    31,     1,    50,     3,    51,     6,    52,    11,    53,    12,
    54,    13,    55,    14,    56,    15,    57,    16,    58,    59,
    59,    17,     0,    18,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
     0,     7,    19,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     7,    23,     7,
    23,    23,    23,    23,    23,    23,    23,    23,    23,    23,
    23,    23,    23,    23,    23,    24,    23,    24,    24,    24,
    24,    24,    24,    24,    24,    24,    24,    24,    24,    24,
    24,    24,    25,    24,    25,    25,    25,    25,    25,    25,
    25,    25,    25,    25,    25,    25,    25,    25,    25,    32,
    25,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    33,    32,    33,    33,
    33,    33,    33,    33,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    34,    33,    34,    34,    34,    34,    34,
    34,    34,    34,    34,    34,    34,    34,    34,    34,    34,
    35,    34,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    35,    35,    35,    36,    35,    36,
    36,    36,    36,    36,    36,    36,    36,    36,    36,    36,
    36,    36,    36,    36,    37,    36,    37,    37,    37,    37,
    37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
    37,    38,    37,    38,    38,    38,    38,    38,    38,    38,
    38,    38,    38,    38,    38,    38,    38,    38,    39,    38,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    40,    39,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    41,    40,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    20,
    41,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,    22,     4,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    28,    28,    48,    28,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
   nil,    29,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,   nil,    30,     2,
     2,     5,     5,    26,    26,    45,    45 ]

racc_action_pointer = [
    36,    21,   364,     0,   293,   368,    18,    55,   nil,   nil,
   nil,     3,     5,     7,     9,    11,    13,    17,    19,    38,
   275,   nil,   316,    72,    89,   106,   370,   nil,   310,   327,
   344,    -5,   123,   140,   157,   174,   191,   208,   225,   242,
   259,   276,   nil,   nil,   nil,   370,   nil,   nil,   326,   nil,
    -3,    -1,     1,     3,     5,     7,     9,    11,    13,    34,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -27,   -27,    -1,   -12,   -27,    -6,    -9,   -27,   -13,   -14,
   -15,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,
   -27,   -26,   -27,   -27,   -27,   -27,    -5,   -12,   -27,   -27,
   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,
   -27,   -27,    70,    -3,    -4,    -2,    -7,    -8,   -10,   -11,
   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,   -27,
   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25 ]

racc_goto_table = [
     2,     1,    26,    48,   nil,   nil,   nil,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,   nil,   nil,
   nil,   nil,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59 ]

racc_goto_check = [
     2,     1,     3,     4,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     2,     2,     3,     3,   nil,   nil,
   nil,   nil,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0,    -2,   -27 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 27, :_reduce_1,
  3, 27, :_reduce_2,
  3, 28, :_reduce_3,
  3, 28, :_reduce_4,
  2, 28, :_reduce_5,
  1, 28, :_reduce_none,
  3, 29, :_reduce_7,
  3, 29, :_reduce_8,
  1, 29, :_reduce_none,
  3, 30, :_reduce_10,
  3, 30, :_reduce_11,
  1, 30, :_reduce_12,
  1, 30, :_reduce_none,
  1, 30, :_reduce_14,
  1, 30, :_reduce_15,
  4, 30, :_reduce_16,
  4, 30, :_reduce_17,
  4, 30, :_reduce_18,
  4, 30, :_reduce_19,
  4, 30, :_reduce_20,
  4, 30, :_reduce_21,
  4, 30, :_reduce_22,
  4, 30, :_reduce_23,
  4, 30, :_reduce_24,
  4, 30, :_reduce_25,
  1, 30, :_reduce_26 ]

racc_reduce_n = 27

racc_shift_n = 70

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  "**" => 7,
  :ID => 8,
  :NUM => 9,
  :PI => 10,
  :E => 11,
  :sqrt => 12,
  :sin => 13,
  :cos => 14,
  :tan => 15,
  :asin => 16,
  :acos => 17,
  :atan => 18,
  :exp => 19,
  :log => 20,
  :log10 => 21,
  :v => 22,
  "=" => 23,
  "(" => 24,
  ")" => 25 }

racc_nt_base = 26

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"**\"",
  "ID",
  "NUM",
  "PI",
  "E",
  "sqrt",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "exp",
  "log",
  "log10",
  "v",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "$start",
  "statement",
  "expression",
  "factor",
  "primary" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'calc.y', 11)
  def _reduce_1(val, _values)
     @v = val[0]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 12)
  def _reduce_2(val, _values)
     @v = @table[val[0]] = val[2]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 13)
  def _reduce_3(val, _values)
     val[0] + val[2]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 14)
  def _reduce_4(val, _values)
     val[0] - val[2]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 15)
  def _reduce_5(val, _values)
     -(val[1])
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'calc.y', 17)
  def _reduce_7(val, _values)
     val[0] * val[2]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 18)
  def _reduce_8(val, _values)
     if (val[2] != 0.0) then val[0] / val[2] else raise("Division by zero.") end
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'calc.y', 20)
  def _reduce_10(val, _values)
     val [0] ** val[1]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 21)
  def _reduce_11(val, _values)
     val[1]
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 22)
  def _reduce_12(val, _values)
    if @table[val[0]] then @table[val[0]] else raise("#{val[0]} not found.") end
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'calc.y', 24)
  def _reduce_14(val, _values)
     Math::PI
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 25)
  def _reduce_15(val, _values)
     Math::E
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 26)
  def _reduce_16(val, _values)
     sqrt(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 27)
  def _reduce_17(val, _values)
     sin(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 28)
  def _reduce_18(val, _values)
     cos(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 29)
  def _reduce_19(val, _values)
     tan(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 30)
  def _reduce_20(val, _values)
     asin(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 31)
  def _reduce_21(val, _values)
     acos(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 32)
  def _reduce_22(val, _values)
     atan(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 33)
  def _reduce_23(val, _values)
     exp(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 34)
  def _reduce_24(val, _values)
     log(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 35)
  def _reduce_25(val, _values)
     log10(val[2] )
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 36)
  def _reduce_26(val, _values)
     @v
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Calc

#
